From 50b4c9ea11057dd8d1998878625d9d154cef86de Mon Sep 17 00:00:00 2001
From: julien delnatte <julien.delnatte@gmail.com>
Date: Tue, 8 Jun 2021 00:07:25 +0200
Subject: [PATCH] [fix] a bug with moto variable and make standaloneLite
 Work!!!!

---
 concatStandaloneScripts.txt |   4 +-
 src/kiri/engine.js          |   4 +-
 src/standalone.js           |  60 +++++++++++--
 src/standalone_end.js       |   1 +
 standaloneLite.js           | 171 ++++++++++++++++++++++++++++++++++++
 5 files changed, 229 insertions(+), 11 deletions(-)
 create mode 100644 src/standalone_end.js
 create mode 100644 standaloneLite.js

diff --git a/concatStandaloneScripts.txt b/concatStandaloneScripts.txt
index 1fcf1ddf..7cbfb78f 100644
--- a/concatStandaloneScripts.txt
+++ b/concatStandaloneScripts.txt
@@ -1,6 +1,5 @@
 ./src/standalone.js
 ./src/kiri.js
-./src/ext/three.js
 ./src/ext/pngjs.js
 ./src/ext/jszip.js
 ./src/license.js
@@ -48,4 +47,5 @@
 ./src/kiri/print.js
 ./src/kiri/codec.js
 ./src/kiri/worker.js
-./src/moto/load-stl.js
\ No newline at end of file
+./src/moto/load-stl.js
+./src/standalone_end.js
\ No newline at end of file
diff --git a/src/kiri/engine.js b/src/kiri/engine.js
index 2ccbae4a..a6759972 100644
--- a/src/kiri/engine.js
+++ b/src/kiri/engine.js
@@ -37,7 +37,7 @@ class Engine {
         return new Promise((accept, reject) => {
             try {
                 console.time("load");
-                new moto.STL().load(url, vertices => {
+                new self.moto.STL().load(url, vertices => {
                     this.listener({loaded: url, vertices});
                     // console.log("vertices", vertices);
 
@@ -54,7 +54,7 @@ class Engine {
     parse(data) {
         return new Promise((accept, reject) => {
             try {
-                let vertices = new moto.STL().parse(data);
+                let vertices = new self.moto.STL().parse(data);
                 this.listener({parsed: data, vertices});
                 this.widget.loadVertices(vertices).center();
                 accept(this);
diff --git a/src/standalone.js b/src/standalone.js
index c4f52bab..5274f145 100644
--- a/src/standalone.js
+++ b/src/standalone.js
@@ -1,9 +1,55 @@
-navigator = { userAgent: "" };
-self = {
-    THREE,
-    kiri: { driver: {}, loader: [] },
-    location: { hostname: 'local', port: 0, protocol: 'fake' },
-    postMessage: (msg) => {
+let navigator = { userAgent: "" };
+let self = global.self = {
+    THREE: global.THREE,
+    kiri : { driver: {}, loader: [] },
+    location : { hostname: 'local', port: 0, protocol: 'fake' },
+    postMessage : (msg) => {
         self.kiri.client.onmessage({data:msg});
     }
-};
\ No newline at end of file
+};
+
+// fake fetch for worker to get wasm, if needed
+let fetch = function(url) {
+    console.log({fake_fetch: url});
+    let buf = global.fs.readFileSync("./" + url);
+    return new Promise((resolve, reject) => {
+        resolve(new Promise((resolve, reject) => {
+            resolve({
+                arrayBuffer: function() {
+                    return buf;
+                }
+            });
+        }));
+    });
+};
+
+class Worker {
+    constructor(url) {
+        console.log({fake_worker: url});
+    }
+
+    postMessage(msg) {
+        setImmediate(() => {
+            self.kiri.worker.onmessage({data:msg});
+        });
+    }
+
+    onmessage(msg) {
+        // if we end up here, something went wrong
+        console.trace('worker-recv', msg);
+    }
+
+    terminate() {
+        // if we end up here, something went wrong
+        console.trace('worker terminate');
+    }
+}
+
+// node is missing these functions so put them in scope during eval
+function atob(a) {
+    return Buffer.from(a).toString('base64');
+}
+
+function btoa(b) {
+    return Buffer.from(b, 'base64').toString();
+}
\ No newline at end of file
diff --git a/src/standalone_end.js b/src/standalone_end.js
new file mode 100644
index 00000000..87c0c1b5
--- /dev/null
+++ b/src/standalone_end.js
@@ -0,0 +1 @@
+ClipperLib = self.ClipperLib;
\ No newline at end of file
diff --git a/standaloneLite.js b/standaloneLite.js
new file mode 100644
index 00000000..00dbecc8
--- /dev/null
+++ b/standaloneLite.js
@@ -0,0 +1,171 @@
+let fs = require('fs');
+
+/* ---------------------------- */
+/* only if THREE is not defined */
+/* ---------------------------- */
+exports = {};
+THREE = {}
+eval(fs.readFileSync("src/ext/three.js").toString());
+Object.assign(THREE, exports); 
+/* ---------------------------- */
+/* only if THREE is not defined */
+/* ---------------------------- */
+
+global.THREE = THREE;
+global.fs = fs;
+
+require("./code/standalone.js");
+
+let kiri = global.self.kiri;
+let engine = kiri.newEngine();
+
+let buf = fs.readFileSync('./web/obj/cube_kiri.stl').buffer;
+engine.parse(buf)
+    .then(data => {
+        console.log({loaded: data});
+    })
+    .then(() => engine.moveTo(1,1,1))
+    .then(() => engine.setProcess({
+        "sName":"Ender3_test",
+        "sliceHeight":0.25,
+        "sliceShells":3,
+        "sliceShellOrder":"in-out",
+        "sliceLayerStart":"last",
+        "sliceFillAngle":45,
+        "sliceFillOverlap":0.3,
+        "sliceFillSparse":0.2,
+        "sliceFillType":"grid",
+        "sliceAdaptive":false,
+        "sliceMinHeight":0,
+        "sliceSupportDensity":0.25,
+        "sliceSupportOffset":0.4,
+        "sliceSupportGap":1,
+        "sliceSupportSize":6,
+        "sliceSupportArea":1,
+        "sliceSupportExtra":0,
+        "sliceSupportAngle":50,
+        "sliceSupportNozzle":0,
+        "sliceSolidMinArea":10,
+        "sliceSolidLayers":3,
+        "sliceBottomLayers":3,
+        "sliceTopLayers":3,
+        "firstLayerRate":10,
+        "firstLayerPrintMult":1.15,
+        "firstLayerYOffset":0,
+        "firstLayerBrim":0,
+        "firstLayerBeltLead":3,
+        "outputTemp":210,
+        "outputBedTemp":60,
+        "outputFeedrate":50,
+        "outputFinishrate":50,
+        "outputSeekrate":80,
+        "outputShellMult":1.25,
+        "outputFillMult":1.25,
+        "outputSparseMult":1.25,
+        "outputRetractDist":4,
+        "outputRetractSpeed":30,
+        "outputRetractDwell":30,
+        "outputShortPoly":100,
+        "outputMinSpeed":10,
+        "outputCoastDist":0.1,
+        "outputLayerRetract":true,
+        "detectThinWalls":true,
+        "zHopDistance":0,
+        "antiBacklash":0,
+        "outputOriginCenter":false,
+        "sliceFillRate":0,
+        "sliceSupportEnable":false,
+        "firstSliceHeight":0.25,
+        "firstLayerFillRate":35,
+        "firstLayerLineMult":1,
+        "firstLayerNozzleTemp":0,
+        "firstLayerBedTemp":0,
+        "firstLayerBrimTrig":0,
+        "outputRaft":false,
+        "outputRaftSpacing":0.2,
+        "outputRetractWipe":0,
+        "outputBrimCount":2,
+        "outputBrimOffset":2,
+        "outputLoopLayers":null,
+        "outputInvertX":false,
+        "outputInvertY":false,
+        "arcTolerance":0,
+        "gcodePause":"",
+        "ranges":[],
+        "firstLayerFanSpeed":0,
+        "outputFanSpeed":255
+    }))
+    .then(() => engine.setDevice({
+        "noclone":false,
+        "mode":"FDM",
+        "internal":0,
+        "imageURL":"",
+        "imageScale":0.75,
+        "imageAnchor":0,
+        "bedHeight":2.5,
+        "bedWidth":220,
+        "bedDepth":220,
+        "bedRound":false,
+        "bedBelt":false,
+        "maxHeight":300,
+        "originCenter":false,
+        "extrudeAbs":true,
+        "spindleMax":0,
+        "gcodeFan":[ "M106 S{fan_speed}" ],
+        "gcodeTrack":[],
+        "gcodeLayer":[],
+        "gcodePre":[
+            "M107                     ; turn off filament cooling fan",
+            "G90                      ; set absolute positioning mode",
+            "M82                      ; set absolute positioning for extruder",
+            "M104 S{temp} T{tool}     ; set extruder temperature",
+            "M140 S{bed_temp} T{tool} ; set bed temperature",
+            "G28                      ; home axes",
+            "G92 X0 Y0 Z0 E0          ; reset all axes positions",
+            "G1 X0 Y0 Z0.25 F180      ; move XY to 0,0 and Z 0.25mm over bed",
+            "G92 E0                   ; zero the extruded",
+            "M190 S{bed_temp} T{tool} ; wait for bed to reach target temp",
+            "M109 S{temp} T{tool}     ; wait for extruder to reach target temp",
+            "G92 E0                   ; zero the extruded",
+            "G1 F225                  ; set feed speed"
+        ],
+        "gcodePost":[
+            "M107                     ; turn off filament cooling fan",
+            "M104 S0 T{tool}          ; turn off right extruder",
+            "M140 S0 T{tool}          ; turn off bed",
+            "G1 X0 Y300 F1200         ; end move",
+            "M84                      ; disable stepper motors"
+        ],
+        "gcodeProc":"",
+        "gcodePause":[],
+        "gcodeDwell":[],
+        "gcodeSpindle":[],
+        "gcodeChange":[],
+        "gcodeFExt":"gcode",
+        "gcodeSpace":true,
+        "gcodeStrip":false,
+        "gcodeLaserOn":[],
+        "gcodeLaserOff":[],
+        "extruders":[
+        {
+            "extFilament":1.75,
+            "extNozzle":0.4,
+            "extSelect":[ "T0" ],
+            "extDeselect":[],
+            "extOffsetX":0,
+            "extOffsetY":0
+        }
+        ],
+        "new":false,
+        "deviceName":"Creality.Ender.3"
+    }))
+    .then(eng => eng.slice())
+    .then(eng => eng.prepare())
+    .then(eng => engine.export())
+    .then(gcode => {
+        fs.writeFileSync("standalone.gcode", gcode);
+        console.timeEnd("finish");
+    })
+    .catch(error => {
+        console.log({error});
+    });
-- 
2.20.1 (Apple Git-117)

