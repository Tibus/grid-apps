From 4dba3ccbf65cde9e2dddf22f41345a36ebf76ba5 Mon Sep 17 00:00:00 2001
From: julien delnatte <julien.delnatte@gmail.com>
Date: Sat, 26 Jun 2021 20:25:53 +0200
Subject: [PATCH] repo as an addon

---
 .gitignore                  |   3 +-
 binding.gyp                 |  44 +++++++++
 concatStandaloneScripts.txt |   5 +-
 cpp/main.cpp                |  13 +++
 index.js                    |   1 +
 package.json                |  11 ++-
 src/kiri/engine.js          |   9 ++
 src/standalone.js           |  23 +++++
 src/standalone_end.js       |   4 +-
 standaloneLite.js           |  25 ++---
 test.js                     | 184 ++++++++++++++++++++++++++++++++++++
 11 files changed, 305 insertions(+), 17 deletions(-)
 create mode 100644 binding.gyp
 create mode 100644 cpp/main.cpp
 create mode 100644 index.js
 create mode 100644 test.js

diff --git a/.gitignore b/.gitignore
index fd8c37b6..b1eec2ec 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,4 +5,5 @@ node_modules
 code
 package-lock.json
 logs/*
-data/*
\ No newline at end of file
+data/*
+/build
diff --git a/binding.gyp b/binding.gyp
new file mode 100644
index 00000000..340bc600
--- /dev/null
+++ b/binding.gyp
@@ -0,0 +1,44 @@
+{
+    "targets": [{
+        "target_name": "addon",
+        "cflags!": [ "-fexceptions", "--max-old-space-size=3000" ],
+        "cflags_cc!": [ "-fexceptions", "-fno-rtti", "-fno-exceptions" ],
+        "sources": [
+            "cpp/main.cpp",
+        ],
+        'include_dirs': [
+            "<!@(node -p \"require('node-addon-api').include\")",
+        ],
+        'libraries': [
+        ],
+        'dependencies': [
+            "<!(node -p \"require('node-addon-api').gyp\")"
+        ],
+       'conditions': [
+        ['OS=="win"', {
+          "msvs_settings": {
+            "VCCLCompilerTool": {
+              "ExceptionHandling": 1
+            }
+          }
+        }],
+        ['OS=="mac"', {
+          "xcode_settings": {
+            "CLANG_CXX_LIBRARY": "libc++",
+            'GCC_ENABLE_CPP_EXCEPTIONS': 'YES',
+            'GCC_ENABLE_CPP_RTTI': 'YES',
+            'MACOSX_DEPLOYMENT_TARGET': '10.8'
+          }
+        }],
+        ['OS=="linux"', {
+          "CLANG_CXX_LIBRARY": "libc++",
+          'GCC_ENABLE_CPP_EXCEPTIONS': 'YES',
+          'GCC_ENABLE_CPP_RTTI': 'YES',
+        }]
+      ],
+      'defines': [ 
+        'NAPI_CPP_EXCEPTIONS',
+        'TASKING_INTERNAL'
+      ]
+    }]
+}
diff --git a/concatStandaloneScripts.txt b/concatStandaloneScripts.txt
index 14853153..3ad24c9e 100644
--- a/concatStandaloneScripts.txt
+++ b/concatStandaloneScripts.txt
@@ -47,4 +47,7 @@
 ./src/kiri/codec.js
 ./src/kiri/worker.js
 ./src/moto/load-stl.js
-./src/standalone_end.js
\ No newline at end of file
+./src/standalone_end.js
+
+
+./src/kiri/engine.js
\ No newline at end of file
diff --git a/cpp/main.cpp b/cpp/main.cpp
new file mode 100644
index 00000000..b7e4b557
--- /dev/null
+++ b/cpp/main.cpp
@@ -0,0 +1,13 @@
+#include <napi.h>
+
+Napi::Value test(const Napi::CallbackInfo &info){
+  Napi::Env env = info.Env();
+  return Napi::String::New(env, "coucou");
+}
+
+Napi::Object InitAll(Napi::Env env, Napi::Object exports) {
+  exports["test"] = Napi::Function::New(env, test);
+  return exports;
+}
+
+NODE_API_MODULE(NODE_GYP_MODULE_NAME, InitAll)
diff --git a/index.js b/index.js
new file mode 100644
index 00000000..86d96703
--- /dev/null
+++ b/index.js
@@ -0,0 +1 @@
+return require("./code/standalone.js");
\ No newline at end of file
diff --git a/package.json b/package.json
index 3da22775..304b58db 100644
--- a/package.json
+++ b/package.json
@@ -5,12 +5,16 @@
     "author": "Stewart Allen <sa@grid.space>",
     "license": "MIT",
     "private": false,
-    "scripts":{
+    "main": "./index.js",
+    "scripts": {
+        "test": "node --expose_gc ./test.js",
         "moveWorkerImport": "sed -i '' 's/\\/code\\/worker.js/.\\/vendors\\/kiri\\/worker.js/g' ./code/engine.js",
         "concatEngine": "xargs cat < ./concatEngineScripts.txt > ./code/engine.js",
         "concatWorker": "xargs cat < ./concatWorkerScripts.txt > ./code/worker.js",
         "concatStandalone": "xargs cat < ./concatStandaloneScripts.txt > ./code/standalone.js",
-        "concatFiles": "npm run concatEngine && npm run concatWorker && npm run moveWorkerImport && npm run concatStandalone"
+        "concatFiles": "npm run concatEngine && npm run concatWorker && npm run moveWorkerImport && npm run concatStandalone",
+        "installAndTest": "npm install && npm run concatFiles && npm run test",
+        "clearForProd": "rimraf ./apps ./code ./conf ./cpp ./data ./logs ./node_modules ./src ./web"
     },
     "repository": {
         "type": "git",
@@ -28,6 +32,9 @@
         "slicer"
     ],
     "dependencies": {
+        "bindings": "^1.5.0",
+        "node-abi": "^2.21.0",
+        "node-addon-api": "^3.1.0",
         "base64-js": "^1.5.1",
         "buffer-crc32": "^0.2.13",
         "compression": "^1.7.4",
diff --git a/src/kiri/engine.js b/src/kiri/engine.js
index a6759972..d6c25b33 100644
--- a/src/kiri/engine.js
+++ b/src/kiri/engine.js
@@ -1,6 +1,13 @@
 /** Copyright Stewart Allen <sa@grid.space> -- All Rights Reserved */
 
 "use strict";
+let addon3D;
+
+try {
+  addon3D = require('../build/Debug/addon');
+} catch (error) {
+  addon3D = require('../build/Release/addon');
+}
 
 (function() {
 
@@ -123,6 +130,8 @@ class Engine {
             // Todo: for loop on every non support widget
             KIRI.client.slice(this.settings, this.widget, msg => {
                 console.log("msg", msg);
+                console.log("addon3D test:", addon3D.test());
+
                 this.listener({slice:msg});
                 if (msg.error) {
                     reject(msg.error);
diff --git a/src/standalone.js b/src/standalone.js
index 4726701b..b320e0fe 100644
--- a/src/standalone.js
+++ b/src/standalone.js
@@ -11,10 +11,33 @@ if (electron?.remote){
   fs = require("fs");
 }
 
+let navigator = { userAgent: "" };
+let self = {
+    THREE: THREE,
+    kiri : { driver: {}, loader: [] },
+    location : { hostname: 'local', port: 0, protocol: 'fake' },
+};
+
 self.postMessage = (msg) => {
     self.kiri.client.onmessage({data:msg});
 }
 
+
+// fake fetch for worker to get wasm, if needed
+let fetch = function(url) {
+    console.log({fake_fetch: url});
+    let buf = fs.readFileSync("." + url);
+    return new Promise((resolve, reject) => {
+        resolve(new Promise((resolve, reject) => {
+            resolve({
+                arrayBuffer: function() {
+                    return buf;
+                }
+            });
+        }));
+    });
+};
+
 class Worker {
     constructor(url) {
         console.log({fake_worker: url});
diff --git a/src/standalone_end.js b/src/standalone_end.js
index 87c0c1b5..5a62817d 100644
--- a/src/standalone_end.js
+++ b/src/standalone_end.js
@@ -1 +1,3 @@
-ClipperLib = self.ClipperLib;
\ No newline at end of file
+ClipperLib = self.ClipperLib;
+
+module.exports = self;
\ No newline at end of file
diff --git a/standaloneLite.js b/standaloneLite.js
index dea664c0..b1ad5c8f 100644
--- a/standaloneLite.js
+++ b/standaloneLite.js
@@ -1,3 +1,13 @@
+let addon3D;
+
+try {
+  addon3D = require('./build/Debug/addon');
+} catch (error) {
+  addon3D = require('./build/Release/addon');
+}
+
+console.log("addon3D :", addon3D.test());
+
 let fs = require('fs');
 
 /* ---------------------------- */
@@ -11,24 +21,15 @@ Object.assign(THREE, exports);
 /* only if THREE is not defined */
 /* ---------------------------- */
 
-let navigator = { userAgent: "" };
-let self = {
-    THREE: THREE,
-    kiri : { driver: {}, loader: [] },
-    location : { hostname: 'local', port: 0, protocol: 'fake' },
-};
 
-// global.THREE = THREE;
-// global.fs = fs;
-
-eval(fs.readFileSync("./code/standalone.js").toString());
-// require("./code/standalone.js");
+// eval(fs.readFileSync("./code/standalone.js").toString());
+let self = require("./code/standalone.js");
 
 let kiri = self.kiri;
 let engine = kiri.newEngine();
 
-
 let buf = fs.readFileSync('./web/obj/donut.stl').buffer;
+// let buf = fs.readFileSync('./web/obj/poussin.stl').buffer;
 // engine.setListener((mess)=>{console.log("mess", mess)});
 
 console.time("slicing");
diff --git a/test.js b/test.js
new file mode 100644
index 00000000..b1ad5c8f
--- /dev/null
+++ b/test.js
@@ -0,0 +1,184 @@
+let addon3D;
+
+try {
+  addon3D = require('./build/Debug/addon');
+} catch (error) {
+  addon3D = require('./build/Release/addon');
+}
+
+console.log("addon3D :", addon3D.test());
+
+let fs = require('fs');
+
+/* ---------------------------- */
+/* only if THREE is not defined */
+/* ---------------------------- */
+exports = {};
+THREE = {}
+eval(fs.readFileSync("src/ext/three.js").toString());
+Object.assign(THREE, exports); 
+/* ---------------------------- */
+/* only if THREE is not defined */
+/* ---------------------------- */
+
+
+// eval(fs.readFileSync("./code/standalone.js").toString());
+let self = require("./code/standalone.js");
+
+let kiri = self.kiri;
+let engine = kiri.newEngine();
+
+let buf = fs.readFileSync('./web/obj/donut.stl').buffer;
+// let buf = fs.readFileSync('./web/obj/poussin.stl').buffer;
+// engine.setListener((mess)=>{console.log("mess", mess)});
+
+console.time("slicing");
+engine.parse(buf)
+    .then(data => {
+        console.log({loaded: data});
+    })
+    .then(() => engine.moveTo(1,1,1))
+    .then(() => engine.setProcess({
+        "sName":"Ender3_test",
+        "sliceHeight":0.25,
+        "sliceShells":3,
+        "sliceShellOrder":"in-out",
+        "sliceLayerStart":"last",
+        "sliceFillAngle":45,
+        "sliceFillOverlap":0.3,
+        "sliceFillSparse":0.2,
+        "sliceFillType":"grid",
+        "sliceAdaptive":false,
+        "sliceMinHeight":0,
+        "sliceSupportDensity":0.25,
+        "sliceSupportOffset":0.4,
+        "sliceSupportGap":1,
+        "sliceSupportSize":6,
+        "sliceSupportArea":1,
+        "sliceSupportExtra":0,
+        "sliceSupportAngle":50,
+        "sliceSupportNozzle":0,
+        "sliceSolidMinArea":10,
+        "sliceSolidLayers":3,
+        "sliceBottomLayers":3,
+        "sliceTopLayers":3,
+        "firstLayerRate":10,
+        "firstLayerPrintMult":1.15,
+        "firstLayerYOffset":0,
+        "firstLayerBrim":0,
+        "firstLayerBeltLead":3,
+        "outputTemp":210,
+        "outputBedTemp":60,
+        "outputFeedrate":50,
+        "outputFinishrate":50,
+        "outputSeekrate":80,
+        "outputShellMult":1.25,
+        "outputFillMult":1.25,
+        "outputSparseMult":1.25,
+        "outputRetractDist":4,
+        "outputRetractSpeed":30,
+        "outputRetractDwell":30,
+        "outputShortPoly":100,
+        "outputMinSpeed":10,
+        "outputCoastDist":0.1,
+        "outputLayerRetract":true,
+        "detectThinWalls":true,
+        "zHopDistance":0,
+        "antiBacklash":0,
+        "outputOriginCenter":false,
+        "sliceFillRate":0,
+        "sliceSupportEnable":false,
+        "firstSliceHeight":0.25,
+        "firstLayerFillRate":35,
+        "firstLayerLineMult":1,
+        "firstLayerNozzleTemp":0,
+        "firstLayerBedTemp":0,
+        "firstLayerBrimTrig":0,
+        "outputRaft":false,
+        "outputRaftSpacing":0.2,
+        "outputRetractWipe":0,
+        "outputBrimCount":2,
+        "outputBrimOffset":2,
+        "outputLoopLayers":null,
+        "outputInvertX":false,
+        "outputInvertY":false,
+        "arcTolerance":0,
+        "gcodePause":"",
+        "ranges":[],
+        "firstLayerFanSpeed":0,
+        "outputFanSpeed":255
+    }))
+    .then(() => engine.setDevice({
+        "noclone":false,
+        "mode":"FDM",
+        "internal":0,
+        "imageURL":"",
+        "imageScale":0.75,
+        "imageAnchor":0,
+        "bedHeight":2.5,
+        "bedWidth":220,
+        "bedDepth":220,
+        "bedRound":false,
+        "bedBelt":false,
+        "maxHeight":300,
+        "originCenter":false,
+        "extrudeAbs":true,
+        "spindleMax":0,
+        "gcodeFan":[ "M106 S{fan_speed}" ],
+        "gcodeTrack":[],
+        "gcodeLayer":[],
+        "gcodePre":[
+            "M107                     ; turn off filament cooling fan",
+            "G90                      ; set absolute positioning mode",
+            "M82                      ; set absolute positioning for extruder",
+            "M104 S{temp} T{tool}     ; set extruder temperature",
+            "M140 S{bed_temp} T{tool} ; set bed temperature",
+            "G28                      ; home axes",
+            "G92 X0 Y0 Z0 E0          ; reset all axes positions",
+            "G1 X0 Y0 Z0.25 F180      ; move XY to 0,0 and Z 0.25mm over bed",
+            "G92 E0                   ; zero the extruded",
+            "M190 S{bed_temp} T{tool} ; wait for bed to reach target temp",
+            "M109 S{temp} T{tool}     ; wait for extruder to reach target temp",
+            "G92 E0                   ; zero the extruded",
+            "G1 F225                  ; set feed speed"
+        ],
+        "gcodePost":[
+            "M107                     ; turn off filament cooling fan",
+            "M104 S0 T{tool}          ; turn off right extruder",
+            "M140 S0 T{tool}          ; turn off bed",
+            "G1 X0 Y300 F1200         ; end move",
+            "M84                      ; disable stepper motors"
+        ],
+        "gcodeProc":"",
+        "gcodePause":[],
+        "gcodeDwell":[],
+        "gcodeSpindle":[],
+        "gcodeChange":[],
+        "gcodeFExt":"gcode",
+        "gcodeSpace":true,
+        "gcodeStrip":false,
+        "gcodeLaserOn":[],
+        "gcodeLaserOff":[],
+        "extruders":[
+        {
+            "extFilament":1.75,
+            "extNozzle":0.4,
+            "extSelect":[ "T0" ],
+            "extDeselect":[],
+            "extOffsetX":0,
+            "extOffsetY":0
+        }
+        ],
+        "new":false,
+        "deviceName":"Creality.Ender.3"
+    }))
+    .then(eng => eng.slice())
+    .then(eng => eng.prepare())
+    .then(eng => engine.export())
+    .then(gcode => {
+        fs.writeFileSync("standalone.gcode", gcode);
+        console.timeEnd("slicing");
+    })
+    .catch(error => {
+        console.log({error});
+    });
-- 
2.20.1 (Apple Git-117)

